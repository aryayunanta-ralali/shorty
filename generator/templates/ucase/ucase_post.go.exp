package {{packageNamespace}}

import (
	"net/url"

	"github.com/thedevsaddam/govalidator"

	"github.com/ralali/{{repoName}}/internal/appctx"
	"github.com/ralali/{{repoName}}/internal/consts"
	"github.com/ralali/{{repoName}}/internal/presentations"
	"github.com/ralali/{{repoName}}/internal/ucase/contract"
	"github.com/ralali/{{repoName}}/pkg/logger"
	"github.com/ralali/{{repoName}}/pkg/tracer"
)

type {{lowerFunctionName}} struct {
	// repo repositories.RepoName
	idGenerator func() int64
}

// TO-DO: DONT FORGET TO INJECT REPO HERE IF USED!
func New{{upperFunctionName}}(idGenerator func() int64) contract.UseCase {
	return &{{lowerFunctionName}}{idGenerator: idGenerator}
}

// TO-DO: MOVE THIS CONST TO LOG EVENT IF NOT ALREADY EXISTS
// LogEventName{{upperFunctionName}} const
// LogEventName{{upperFunctionName}} = `{{upperFunctionName}}`

// TO-DO: MOVE THIS CONST TO LOG MESSAGE if not already exists
// LogMessageFailedToValidateRequestBody const
// LogMessageFailedToValidateRequestBody = `failed to validate request body, err: %v`

// LogMessageDBFailedToStore const
// LogMessageDBFailedToStore = `failed to store data into the database, err: %v`

// TO-DO: MOVE THIS CONST TO LOG EVENT STATE if not already exists
// LogEventStateValidateRequestBody const
// LogEventStateValidateRequestBody = "ValidateRequestBody"

// LogEventStateInsertData const
// LogEventStateInsertData = "InsertDataToDB"

// TO-DO: MOVE THIS CODE BELOW TO `router`.go
// {{lowerFunctionName}} := {{packageNamespace}}.New{{upperFunctionName}}(generator.GenerateInt64)
/*
	exV1.HandleFunc("/{route}", rtr.handle(
		handler.HttpRequest,
		{{lowerFunctionName}},
		middleware.ValidateLanguage,
		middleware.ValidateAccountID,
		middleware.ValidateUserID,
		middleware.ValidateUserEmail,
	)).Methods(http.MethodPost)
*/

// Serve
// API Contract: https://www.notion.so/ralalicom/
func (u *{{lowerFunctionName}}) Serve(data *appctx.Data) (response appctx.Response) {
	var (
		ctx = tracer.SpanStartUseCase(data.Request.Context(), "Serve")

		lvState1       = consts.LogEventStateValidateRequestBody
		lfState1Status = "state_1_validate_request_status"

		lvState2       = consts.LogEventStateInsertData
		lfState2Status = "state_2_insert_to_db_status"

		err     error
		payload presentations.{{upperFunctionName}}Payload

		lf = []logger.Field{
			logger.EventName(consts.LogEventName{{upperFunctionName}}),
		}
	)

	defer tracer.SpanFinish(ctx)

	/*------------------------------
	| STEP 1 : validate request body
	* -----------------------------*/
	err = data.Cast(&payload)
	if err != nil {
		lf = append(lf,
			logger.EventState(lvState1),
			logger.Any(lfState1Status, consts.LogStatusFailed),
		)
		logger.WarnWithContext(ctx, logger.SetMessageFormat(consts.LogMessageFailedToValidateRequestBody, err), lf...)
		response.SetName(consts.ResponseValidationFailure)
		return
	}

	status, ev := u.validateRequestBody(payload)
	if status != consts.ResponseSuccess {
		lf = append(lf,
			logger.EventState(lvState1),
			logger.Any(lfState1Status, consts.LogStatusFailed),
		)
		logger.WarnWithContext(ctx, logger.SetMessageFormat(consts.LogMessageFailedToValidateRequestBody, ev), lf...)
		response.SetName(status)
		response.SetError(ev)
		return
	}

	lf = append(lf,
		logger.Any(lfState1Status, consts.LogStatusSuccess),
	)

	/*---------------------------
	| STEP 2 : insert data from db
	* --------------------------*/
	dataInsert := TransformToInsertEntity(payload, u.idGenerator())
	err = u.repo.Insert(ctx, dataInsert)
	if err != nil {
		tracer.SpanError(ctx, err)
		lf = append(lf,
			logger.EventState(lvState2),
			logger.Any(lfState2Status, consts.LogStatusFailed),
		)
		logger.ErrorWithContext(ctx, logger.SetMessageFormat(consts.LogMessageDBFailedToStore, "table_name", err), lf...)
		response.SetName(consts.ResponseInternalFailure)
		return
	}

	response.SetName(consts.ResponseSuccess)
	logger.InfoWithContext(ctx, logger.SetMessageFormat(consts.LogMessageSuccess, consts.LogEventName{{upperFunctionName}}), lf...)
	return
}

// validateRequestBody represent function to validate request payload
func (u *{{lowerFunctionName}}) validateRequestBody(reqBody presentations.{{upperFunctionName}}Payload) (string, url.Values) {
	// TO-DO: MOVE RULES BELOW TO VALIDATOR RULE CONSTANTS IF NOT ALREADY EXISTS
	RulesName := []string{"required", "min:3", "max:255"}

	rules := govalidator.MapData{
		"name": RulesName,
	}

	options := govalidator.Options{
		Data:          &reqBody,
		Rules:         rules,
		TagIdentifier: "json",
	}

	v := govalidator.New(options)
	ev := v.ValidateStruct()
	if len(ev) != 0 {
		return consts.ResponseValidationFailure, ev
	}

	return consts.ResponseSuccess, nil
}

// YOU CAN ALSO MOVE THIS FUNCTION TO DTO
// TO-DO: CHANGE INTERFACE ENTITY TO BE STORED
func TransformToInsertEntity(body presentations.{{upperFunctionName}}Payload, id int64) interface{} {
	return ""

	/* sample:
	return entity.Orders{
		ID: id,
		Name: body.Name,
	}
	*/
}
